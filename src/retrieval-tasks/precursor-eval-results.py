import pandas as pd

# Data for the scored list
data = [
    (1, "https://zbmath.org/1076476", "On the algebra of noncommutative residuation: Polrims and left residuation algebras", 5),
    (2, "https://zbmath.org/590920", "On a property of BCK-identities", 4),
    (3, "https://zbmath.org/5584935", "On axiom systems for R_0-algebras", 4),
    (4, "https://zbmath.org/6678649", "Commutative energetic subsets of BCK-algebras", 3),
    (5, "https://zbmath.org/975736", "Minimal axiomatic system of fuzzy logical algebra", 2),
    (6, "https://zbmath.org/5233155", "On the variety generated by involutive pocrims", 5),
    (7, "https://zbmath.org/5774061", "Representable good EQ-algebras", 3),
    (8, "https://zbmath.org/6024190", "On good EQ-algebras", 3),
    (9, "https://zbmath.org/7118182", "Commutative deductive systems in fuzzy structures", 2),
    (10, "https://zbmath.org/6318771", "Anti fuzzy implicative ideals in BCK-algebras", 2),
    (11, "https://zbmath.org/5857441", "A theorem of representation for Hilbert algebras", 3),
    (12, "https://zbmath.org/6985164", "Nodal filters in hoop algebras", 3),
    (13, "https://zbmath.org/2066280", "Some direct ascendents of Wajsberg and MV algebras", 4),
    (14, "https://zbmath.org/5265559", "A basic algebra is an MV-algebra if and only if it is a BCC-algebra", 3),
    (15, "https://zbmath.org/1615346", "On embedding Hilbert algebras in BCK-algebras", 4),
    (16, "https://zbmath.org/5238925", "Pseudo BCK-semilattices", 4),
    (17, "https://zbmath.org/845939", "On atoms in BBC-algebras", 2),
    (18, "https://zbmath.org/4204312", "Corrections to some results for BCK logics and algebras", 2),
    (19, "https://zbmath.org/6703460", "Positive implicative ((in,in,âˆ¨q))-fuzzy ideals", 2),
    (20, "https://zbmath.org/5871988", "On anti fuzzy ideals of BCK-algebras", 2),
    (21, "https://zbmath.org/1698103", "Algebras inspired by logics", 3),
    (22, "https://zbmath.org/5624217", "Equational spectrum of Hilbert varieties", 3),
    (23, "https://zbmath.org/5925957", "Intuitional fuzzifying ideals in BCK-algebra", 2),
    (24, "https://zbmath.org/6021815", "A new branch of the pure algebra: BCL-algebras", 3),
    (25, "https://zbmath.org/5281553", "Algebraic structures derived from BCK-algebras", 4),
    (26, "https://zbmath.org/5598394", "On BCK algebras. I.b: New algebras of logic", 3),
    (27, "https://zbmath.org/6655021", "Internal states on equality algebras", 2),
    (28, "https://zbmath.org/6848898", "A course in BE-algebras", 2),
    (29, "https://zbmath.org/6258796", "On algebras with a generalized implication", 3),
    (30, "https://zbmath.org/7289571", "Hilbert algebras with supremum generated by finite chains", 3),
    (31, "https://zbmath.org/4193756", "MV and BCK-algebras on posets", 3),
    (32, "https://zbmath.org/5292884", "On BCK algebras. II: Ordinal sum/product of BCK algebras", 3),
    (33, "https://zbmath.org/6028059", "On BCK algebras. III: Classes of MV, BL algebras, etc.", 5),
    (34, "https://zbmath.org/5068043", "On varieties of biresiduation algebras", 5),
    (35, "https://zbmath.org/5652290", "A general Glivenko theorem", 3),
    (36, "https://zbmath.org/5308967", "On BCK algebras. I.a: Unitary treatment of logic algebras", 3),
    (37, "https://zbmath.org/6081580", "A class of BCK-algebras", 3),
    (38, "https://zbmath.org/1071751", "The distributive law for MV-algebras", 3),
    (39, "https://zbmath.org/5041404", "Foldness of commutative ideals in BCK-algebras", 2),
    (40, "https://zbmath.org/5209000", "Computational method to characterize S3-algebras", 2),
    (41, "https://zbmath.org/5498785", "Characterisations of Nelson algebras", 2),
    (42, "https://zbmath.org/4193755", "Closed ideals and p-semisimple BCI-algebras", 2),
    (43, "https://zbmath.org/7067262", "On categorical equivalences of equality algebras", 2),
    (44, "https://zbmath.org/7124021", "Generalized states on EQ-algebras", 2),
    (45, "https://zbmath.org/5006570", "Annihilators in BCK-algebras", 2)
]

# Create DataFrame
df = pd.DataFrame(data, columns=["#", "ZBMATH Link", "Title", "Score"])

# Save to CSV
df.to_csv("precursor_scores.csv", index=False)
print("CSV file 'precursor_scores.csv' created.")
